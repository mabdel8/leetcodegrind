export interface Problem {
  id: string;
  title: string;
  difficulty: 'Easy' | 'Medium' | 'Hard';
  category: string;
  patterns: string[];
  companies: string[];
  frequency: number;
  leetcodeUrl: string;
  sources: ('LeetCodeWizard' | 'NeetCode' | 'LeetCode75' | 'Blind75')[];
  description?: string;
  timeComplexity?: string;
  spaceComplexity?: string;
}

export interface Pattern {
  id: string;
  name: string;
  description: string;
  problems: string[];
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';
  estimatedHours: number;
}

export const patterns: Pattern[] = [
  {
    id: 'arrays-hashing',
    name: 'Arrays & Hashing',
    description: 'Master array manipulation, hash tables, and frequency counting',
    problems: ['two-sum', 'contains-duplicate', 'valid-anagram', 'group-anagrams', 'top-k-frequent', 'product-except-self'],
    difficulty: 'Beginner',
    estimatedHours: 7
  },
  {
    id: 'two-pointers',
    name: 'Two Pointers',
    description: 'Efficient array traversal using multiple pointers',
    problems: ['valid-palindrome', 'two-sum-ii', 'container-with-most-water', '3sum', 'trapping-rain-water'],
    difficulty: 'Beginner',
    estimatedHours: 5
  },
  {
    id: 'sliding-window',
    name: 'Sliding Window',
    description: 'Optimize substring and subarray problems',
    problems: ['longest-substring-without-repeating', 'longest-repeating-character', 'minimum-window-substring', 'sliding-window-maximum'],
    difficulty: 'Intermediate',
    estimatedHours: 3
  },
  {
    id: 'stack',
    name: 'Stack',
    description: 'LIFO data structure applications',
    problems: ['valid-parentheses', 'min-stack', 'evaluate-rpn', 'generate-parentheses'],
    difficulty: 'Beginner',
    estimatedHours: 3
  },
  {
    id: 'binary-search',
    name: 'Binary Search',
    description: 'Divide and conquer search algorithms',
    problems: ['binary-search', 'search-2d-matrix', 'koko-eating-bananas', 'find-minimum-rotated'],
    difficulty: 'Beginner',
    estimatedHours: 4
  },
  {
    id: 'linked-list',
    name: 'Linked List',
    description: 'Pointer manipulation and list operations',
    problems: ['reverse-linked-list', 'merge-two-lists', 'linked-list-cycle', 'remove-nth-node'],
    difficulty: 'Intermediate',
    estimatedHours: 4
  },
  {
    id: 'trees',
    name: 'Trees',
    description: 'Binary tree traversal and operations',
    problems: ['invert-binary-tree', 'maximum-depth', 'same-tree', 'subtree-of-another'],
    difficulty: 'Intermediate',
    estimatedHours: 4
  },
  {
    id: 'tries',
    name: 'Tries',
    description: 'Prefix tree data structure',
    problems: ['implement-trie', 'design-add-search', 'word-search-ii'],
    difficulty: 'Intermediate',
    estimatedHours: 1
  },
  {
    id: 'heap-priority-queue',
    name: 'Heap / Priority Queue',
    description: 'Priority-based data management',
    problems: ['kth-largest-element', 'task-scheduler', 'design-twitter'],
    difficulty: 'Intermediate',
    estimatedHours: 3
  },
  {
    id: 'backtracking',
    name: 'Backtracking',
    description: 'Recursive problem-solving',
    problems: ['subsets', 'combination-sum', 'permutations', 'word-search'],
    difficulty: 'Advanced',
    estimatedHours: 3
  },
  {
    id: 'graphs',
    name: 'Graphs',
    description: 'Graph traversal and algorithms',
    problems: ['number-of-islands', 'clone-graph', 'max-area-island', 'pacific-atlantic'],
    difficulty: 'Advanced',
    estimatedHours: 4
  },
  {
    id: 'advanced-graphs',
    name: 'Advanced Graphs',
    description: 'Complex graph problems',
    problems: ['reconstruct-itinerary', 'min-cost-connect-points', 'network-delay-time'],
    difficulty: 'Advanced',
    estimatedHours: 4
  },
  {
    id: '1d-dynamic-programming',
    name: '1-D Dynamic Programming',
    description: 'Optimization problems',
    problems: ['climbing-stairs', 'min-cost-climbing', 'house-robber', 'house-robber-ii'],
    difficulty: 'Advanced',
    estimatedHours: 6
  },
  {
    id: '2d-dynamic-programming',
    name: '2-D Dynamic Programming',
    description: 'Complex optimization',
    problems: ['unique-paths', 'longest-common-subsequence', 'best-time-buy-sell-cooldown'],
    difficulty: 'Advanced',
    estimatedHours: 3
  },
  {
    id: 'greedy',
    name: 'Greedy',
    description: 'Optimal choice algorithms',
    problems: ['maximum-subarray', 'jump-game', 'gas-station', 'hand-of-straights'],
    difficulty: 'Advanced',
    estimatedHours: 3
  },
  {
    id: 'intervals',
    name: 'Intervals',
    description: 'Range and interval problems',
    problems: ['insert-interval', 'merge-intervals', 'non-overlapping-intervals'],
    difficulty: 'Advanced',
    estimatedHours: 3
  },
  {
    id: 'math-geometry',
    name: 'Math & Geometry',
    description: 'Mathematical problem solving',
    problems: ['rotate-image', 'spiral-matrix', 'set-matrix-zeroes'],
    difficulty: 'Advanced',
    estimatedHours: 3
  },
  {
    id: 'bit-manipulation',
    name: 'Bit Manipulation',
    description: 'Binary operations',
    problems: ['single-number', 'number-of-1-bits', 'counting-bits'],
    difficulty: 'Advanced',
    estimatedHours: 2
  }
];

export const problems: Problem[] = [
  // Arrays & Hashing
  {
    id: 'two-sum',
    title: 'Two Sum',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook', 'Apple'],
    frequency: 100,
    leetcodeUrl: 'https://leetcode.com/problems/two-sum/',
    sources: ['LeetCodeWizard', 'NeetCode', 'LeetCode75', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'contains-duplicate',
    title: 'Contains Duplicate',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 85,
    leetcodeUrl: 'https://leetcode.com/problems/contains-duplicate/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'valid-anagram',
    title: 'Valid Anagram',
    difficulty: 'Easy',
    category: 'String',
    patterns: ['arrays-hashing'],
    companies: ['Amazon', 'Microsoft', 'Facebook'],
    frequency: 80,
    leetcodeUrl: 'https://leetcode.com/problems/valid-anagram/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'group-anagrams',
    title: 'Group Anagrams',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Uber'],
    frequency: 75,
    leetcodeUrl: 'https://leetcode.com/problems/group-anagrams/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n * k log k)',
    spaceComplexity: 'O(n * k)'
  },
  {
    id: 'top-k-frequent',
    title: 'Top K Frequent Elements',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['arrays-hashing', 'heap-priority-queue'],
    companies: ['Amazon', 'Facebook', 'Apple', 'Spotify'],
    frequency: 70,
    leetcodeUrl: 'https://leetcode.com/problems/top-k-frequent-elements/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n log k)',
    spaceComplexity: 'O(n + k)'
  },
  {
    id: 'product-except-self',
    title: 'Product of Array Except Self',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 88,
    leetcodeUrl: 'https://leetcode.com/problems/product-of-array-except-self/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },

  // Two Pointers
  {
    id: 'valid-palindrome',
    title: 'Valid Palindrome',
    difficulty: 'Easy',
    category: 'String',
    patterns: ['two-pointers'],
    companies: ['Microsoft', 'Facebook', 'Amazon'],
    frequency: 70,
    leetcodeUrl: 'https://leetcode.com/problems/valid-palindrome/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'two-sum-ii',
    title: 'Two Sum II - Input Array Is Sorted',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['two-pointers'],
    companies: ['Amazon', 'Microsoft'],
    frequency: 65,
    leetcodeUrl: 'https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'container-with-most-water',
    title: 'Container With Most Water',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['two-pointers'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 64,
    leetcodeUrl: 'https://leetcode.com/problems/container-with-most-water/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: '3sum',
    title: '3Sum',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['two-pointers'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/3sum/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(nÂ²)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'trapping-rain-water',
    title: 'Trapping Rain Water',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['two-pointers'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 66,
    leetcodeUrl: 'https://leetcode.com/problems/trapping-rain-water/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },

  // Sliding Window
  {
    id: 'longest-substring-without-repeating',
    title: 'Longest Substring Without Repeating Characters',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['sliding-window'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 64,
    leetcodeUrl: 'https://leetcode.com/problems/longest-substring-without-repeating-characters/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(min(m,n))'
  },
  {
    id: 'longest-repeating-character',
    title: 'Longest Repeating Character Replacement',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['sliding-window'],
    companies: ['Microsoft', 'Amazon'],
    frequency: 55,
    leetcodeUrl: 'https://leetcode.com/problems/longest-repeating-character-replacement/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'minimum-window-substring',
    title: 'Minimum Window Substring',
    difficulty: 'Hard',
    category: 'String',
    patterns: ['sliding-window'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 58,
    leetcodeUrl: 'https://leetcode.com/problems/minimum-window-substring/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(|S| + |T|)',
    spaceComplexity: 'O(|S| + |T|)'
  },

  // Stack
  {
    id: 'valid-parentheses',
    title: 'Valid Parentheses',
    difficulty: 'Easy',
    category: 'String',
    patterns: ['stack'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 95,
    leetcodeUrl: 'https://leetcode.com/problems/valid-parentheses/',
    sources: ['NeetCode', 'Blind75', 'LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },

  // Binary Search
  {
    id: 'binary-search',
    title: 'Binary Search',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['binary-search'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 90,
    leetcodeUrl: 'https://leetcode.com/problems/binary-search/',
    sources: ['NeetCode'],
    timeComplexity: 'O(log n)',
    spaceComplexity: 'O(1)'
  },

  // Linked List
  {
    id: 'reverse-linked-list',
    title: 'Reverse Linked List',
    difficulty: 'Easy',
    category: 'Linked List',
    patterns: ['linked-list'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 85,
    leetcodeUrl: 'https://leetcode.com/problems/reverse-linked-list/',
    sources: ['NeetCode', 'Blind75', 'LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'merge-two-lists',
    title: 'Merge Two Sorted Lists',
    difficulty: 'Easy',
    category: 'Linked List',
    patterns: ['linked-list'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/merge-two-sorted-lists/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n + m)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'linked-list-cycle',
    title: 'Linked List Cycle',
    difficulty: 'Easy',
    category: 'Linked List',
    patterns: ['linked-list', 'two-pointers'],
    companies: ['Amazon', 'Microsoft', 'Facebook'],
    frequency: 75,
    leetcodeUrl: 'https://leetcode.com/problems/linked-list-cycle/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },

  // Trees
  {
    id: 'invert-binary-tree',
    title: 'Invert Binary Tree',
    difficulty: 'Easy',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 70,
    leetcodeUrl: 'https://leetcode.com/problems/invert-binary-tree/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(h)'
  },
  {
    id: 'maximum-depth',
    title: 'Maximum Depth of Binary Tree',
    difficulty: 'Easy',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Amazon', 'Microsoft', 'Facebook'],
    frequency: 65,
    leetcodeUrl: 'https://leetcode.com/problems/maximum-depth-of-binary-tree/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(h)'
  },

  // Graphs
  {
    id: 'number-of-islands',
    title: 'Number of Islands',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/number-of-islands/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m * n)'
  },
  {
    id: 'clone-graph',
    title: 'Clone Graph',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 55,
    leetcodeUrl: 'https://leetcode.com/problems/clone-graph/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(N + M)',
    spaceComplexity: 'O(N)'
  },

  // Dynamic Programming
  {
    id: 'climbing-stairs',
    title: 'Climbing Stairs',
    difficulty: 'Easy',
    category: 'Dynamic Programming',
    patterns: ['1d-dynamic-programming'],
    companies: ['Amazon', 'Microsoft', 'Apple'],
    frequency: 80,
    leetcodeUrl: 'https://leetcode.com/problems/climbing-stairs/',
    sources: ['NeetCode', 'Blind75', 'LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'house-robber',
    title: 'House Robber',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 66,
    leetcodeUrl: 'https://leetcode.com/problems/house-robber/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'best-time-to-buy-and-sell-stock',
    title: 'Best Time to Buy and Sell Stock',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['arrays-hashing', '1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75', 'LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },

  // More LeetCode 75 problems
  {
    id: 'merge-strings-alternately',
    title: 'Merge Strings Alternately',
    difficulty: 'Easy',
    category: 'String',
    patterns: ['two-pointers'],
    companies: ['Google'],
    frequency: 84,
    leetcodeUrl: 'https://leetcode.com/problems/merge-strings-alternately/',
    sources: ['LeetCodeWizard', 'LeetCode75'],
    timeComplexity: 'O(n + m)',
    spaceComplexity: 'O(n + m)'
  },
  {
    id: 'greatest-common-divisor-of-strings',
    title: 'Greatest Common Divisor of Strings',
    difficulty: 'Easy',
    category: 'String',
    patterns: ['math-geometry'],
    companies: ['Amazon'],
    frequency: 45,
    leetcodeUrl: 'https://leetcode.com/problems/greatest-common-divisor-of-strings/',
    sources: ['LeetCode75'],
    timeComplexity: 'O(min(m,n)*(m+n))',
    spaceComplexity: 'O(min(m,n))'
  },
  {
    id: 'kids-with-candies',
    title: 'Kids With the Greatest Number of Candies',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['arrays-hashing'],
    companies: ['Amazon'],
    frequency: 40,
    leetcodeUrl: 'https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/',
    sources: ['LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'can-place-flowers',
    title: 'Can Place Flowers',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['greedy'],
    companies: ['LinkedIn'],
    frequency: 35,
    leetcodeUrl: 'https://leetcode.com/problems/can-place-flowers/',
    sources: ['LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'reverse-vowels-of-string',
    title: 'Reverse Vowels of a String',
    difficulty: 'Easy',
    category: 'String',
    patterns: ['two-pointers'],
    companies: ['Google', 'Microsoft'],
    frequency: 42,
    leetcodeUrl: 'https://leetcode.com/problems/reverse-vowels-of-a-string/',
    sources: ['LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'reverse-words-in-string',
    title: 'Reverse Words in a String',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['two-pointers'],
    companies: ['Microsoft', 'Amazon'],
    frequency: 48,
    leetcodeUrl: 'https://leetcode.com/problems/reverse-words-in-a-string/',
    sources: ['LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },

  // More comprehensive problems from different sources
  {
    id: 'maximum-subarray',
    title: 'Maximum Subarray',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['greedy', '1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 85,
    leetcodeUrl: 'https://leetcode.com/problems/maximum-subarray/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'merge-intervals',
    title: 'Merge Intervals',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['intervals'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 66,
    leetcodeUrl: 'https://leetcode.com/problems/merge-intervals/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n log n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'insert-interval',
    title: 'Insert Interval',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['intervals'],
    companies: ['Google', 'Facebook', 'LinkedIn'],
    frequency: 60,
    leetcodeUrl: 'https://leetcode.com/problems/insert-interval/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'non-overlapping-intervals',
    title: 'Non-overlapping Intervals',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['intervals', 'greedy'],
    companies: ['Amazon', 'Microsoft'],
    frequency: 50,
    leetcodeUrl: 'https://leetcode.com/problems/non-overlapping-intervals/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n log n)',
    spaceComplexity: 'O(1)'
  },

  // Additional Arrays & Hashing Problems
  {
    id: 'subarray-sum-equals-k',
    title: 'Subarray Sum Equals K',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 76,
    leetcodeUrl: 'https://leetcode.com/problems/subarray-sum-equals-k/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'longest-consecutive-sequence',
    title: 'Longest Consecutive Sequence',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 65,
    leetcodeUrl: 'https://leetcode.com/problems/longest-consecutive-sequence/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'find-all-anagrams',
    title: 'Find All Anagrams in a String',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['arrays-hashing', 'sliding-window'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 58,
    leetcodeUrl: 'https://leetcode.com/problems/find-all-anagrams-in-a-string/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'first-missing-positive',
    title: 'First Missing Positive',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 62,
    leetcodeUrl: 'https://leetcode.com/problems/first-missing-positive/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'majority-element',
    title: 'Majority Element',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 72,
    leetcodeUrl: 'https://leetcode.com/problems/majority-element/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'move-zeroes',
    title: 'Move Zeroes',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['arrays-hashing', 'two-pointers'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 68,
    leetcodeUrl: 'https://leetcode.com/problems/move-zeroes/',
    sources: ['LeetCodeWizard', 'LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },

  // More Two Pointers Problems
  {
    id: 'remove-duplicates-sorted-array',
    title: 'Remove Duplicates from Sorted Array',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['two-pointers'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 64,
    leetcodeUrl: 'https://leetcode.com/problems/remove-duplicates-from-sorted-array/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'sort-colors',
    title: 'Sort Colors',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['two-pointers'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 59,
    leetcodeUrl: 'https://leetcode.com/problems/sort-colors/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'four-sum',
    title: '4Sum',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['two-pointers'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 45,
    leetcodeUrl: 'https://leetcode.com/problems/4sum/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(nÂ³)',
    spaceComplexity: 'O(1)'
  },

  // More Sliding Window Problems
  {
    id: 'max-consecutive-ones-iii',
    title: 'Max Consecutive Ones III',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['sliding-window'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 52,
    leetcodeUrl: 'https://leetcode.com/problems/max-consecutive-ones-iii/',
    sources: ['LeetCodeWizard', 'LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'permutation-in-string',
    title: 'Permutation in String',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['sliding-window'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 55,
    leetcodeUrl: 'https://leetcode.com/problems/permutation-in-string/',
    sources: ['LeetCodeWizard', 'LeetCode75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'sliding-window-maximum',
    title: 'Sliding Window Maximum',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['sliding-window', 'heap-priority-queue'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 67,
    leetcodeUrl: 'https://leetcode.com/problems/sliding-window-maximum/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(k)'
  },

  // More Stack Problems
  {
    id: 'min-stack',
    title: 'Min Stack',
    difficulty: 'Easy',
    category: 'Stack',
    patterns: ['stack'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 71,
    leetcodeUrl: 'https://leetcode.com/problems/min-stack/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'evaluate-reverse-polish-notation',
    title: 'Evaluate Reverse Polish Notation',
    difficulty: 'Medium',
    category: 'Stack',
    patterns: ['stack'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 48,
    leetcodeUrl: 'https://leetcode.com/problems/evaluate-reverse-polish-notation/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'generate-parentheses',
    title: 'Generate Parentheses',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['stack', 'backtracking'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 73,
    leetcodeUrl: 'https://leetcode.com/problems/generate-parentheses/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(4^n / ân)',
    spaceComplexity: 'O(4^n / ân)'
  },
  {
    id: 'daily-temperatures',
    title: 'Daily Temperatures',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['stack'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 63,
    leetcodeUrl: 'https://leetcode.com/problems/daily-temperatures/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'largest-rectangle-histogram',
    title: 'Largest Rectangle in Histogram',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['stack'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 56,
    leetcodeUrl: 'https://leetcode.com/problems/largest-rectangle-in-histogram/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },

  // More Binary Search Problems
  {
    id: 'search-in-rotated-sorted-array',
    title: 'Search in Rotated Sorted Array',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['binary-search'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 69,
    leetcodeUrl: 'https://leetcode.com/problems/search-in-rotated-sorted-array/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(log n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'find-minimum-in-rotated-sorted-array',
    title: 'Find Minimum in Rotated Sorted Array',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['binary-search'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 58,
    leetcodeUrl: 'https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(log n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'search-2d-matrix',
    title: 'Search a 2D Matrix',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['binary-search'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 54,
    leetcodeUrl: 'https://leetcode.com/problems/search-a-2d-matrix/',
    sources: ['NeetCode'],
    timeComplexity: 'O(log(m*n))',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'koko-eating-bananas',
    title: 'Koko Eating Bananas',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['binary-search'],
    companies: ['Google', 'Facebook'],
    frequency: 41,
    leetcodeUrl: 'https://leetcode.com/problems/koko-eating-bananas/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n log m)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'find-peak-element',
    title: 'Find Peak Element',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['binary-search'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/find-peak-element/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(log n)',
    spaceComplexity: 'O(1)'
  },

  // More Linked List Problems
  {
    id: 'add-two-numbers',
    title: 'Add Two Numbers',
    difficulty: 'Medium',
    category: 'Linked List',
    patterns: ['linked-list'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 66,
    leetcodeUrl: 'https://leetcode.com/problems/add-two-numbers/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(max(m,n))',
    spaceComplexity: 'O(max(m,n))'
  },
  {
    id: 'remove-nth-node-from-end',
    title: 'Remove Nth Node From End of List',
    difficulty: 'Medium',
    category: 'Linked List',
    patterns: ['linked-list', 'two-pointers'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 57,
    leetcodeUrl: 'https://leetcode.com/problems/remove-nth-node-from-end-of-list/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'reorder-list',
    title: 'Reorder List',
    difficulty: 'Medium',
    category: 'Linked List',
    patterns: ['linked-list'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 53,
    leetcodeUrl: 'https://leetcode.com/problems/reorder-list/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'merge-k-sorted-lists',
    title: 'Merge k Sorted Lists',
    difficulty: 'Hard',
    category: 'Linked List',
    patterns: ['linked-list', 'heap-priority-queue'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 74,
    leetcodeUrl: 'https://leetcode.com/problems/merge-k-sorted-lists/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n log k)',
    spaceComplexity: 'O(log k)'
  },
  {
    id: 'copy-list-with-random-pointer',
    title: 'Copy List with Random Pointer',
    difficulty: 'Medium',
    category: 'Linked List',
    patterns: ['linked-list'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 62,
    leetcodeUrl: 'https://leetcode.com/problems/copy-list-with-random-pointer/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },

  // More Trees Problems (continuing the expansion to 300+)
  {
    id: 'validate-binary-search-tree',
    title: 'Validate Binary Search Tree',
    difficulty: 'Medium',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 68,
    leetcodeUrl: 'https://leetcode.com/problems/validate-binary-search-tree/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(h)'
  },
  {
    id: 'kth-smallest-element-in-bst',
    title: 'Kth Smallest Element in a BST',
    difficulty: 'Medium',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 64,
    leetcodeUrl: 'https://leetcode.com/problems/kth-smallest-element-in-a-bst/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(h + k)',
    spaceComplexity: 'O(h)'
  },
  {
    id: 'lowest-common-ancestor-bst',
    title: 'Lowest Common Ancestor of a Binary Search Tree',
    difficulty: 'Easy',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 59,
    leetcodeUrl: 'https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(h)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'binary-tree-level-order-traversal',
    title: 'Binary Tree Level Order Traversal',
    difficulty: 'Medium',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 72,
    leetcodeUrl: 'https://leetcode.com/problems/binary-tree-level-order-traversal/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'serialize-deserialize-binary-tree',
    title: 'Serialize and Deserialize Binary Tree',
    difficulty: 'Hard',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/serialize-and-deserialize-binary-tree/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'construct-binary-tree-preorder-inorder',
    title: 'Construct Binary Tree from Preorder and Inorder Traversal',
    difficulty: 'Medium',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 58,
    leetcodeUrl: 'https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'binary-tree-maximum-path-sum',
    title: 'Binary Tree Maximum Path Sum',
    difficulty: 'Hard',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 67,
    leetcodeUrl: 'https://leetcode.com/problems/binary-tree-maximum-path-sum/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(h)'
  },
  {
    id: 'subtree-of-another-tree',
    title: 'Subtree of Another Tree',
    difficulty: 'Easy',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 55,
    leetcodeUrl: 'https://leetcode.com/problems/subtree-of-another-tree/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(h)'
  },

  // More Graph Problems
  {
    id: 'course-schedule',
    title: 'Course Schedule',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 69,
    leetcodeUrl: 'https://leetcode.com/problems/course-schedule/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(V + E)',
    spaceComplexity: 'O(V + E)'
  },
  {
    id: 'course-schedule-ii',
    title: 'Course Schedule II',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/course-schedule-ii/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(V + E)',
    spaceComplexity: 'O(V + E)'
  },
  {
    id: 'word-ladder',
    title: 'Word Ladder',
    difficulty: 'Hard',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 54,
    leetcodeUrl: 'https://leetcode.com/problems/word-ladder/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(M^2 * N)',
    spaceComplexity: 'O(M^2 * N)'
  },
  {
    id: 'surrounded-regions',
    title: 'Surrounded Regions',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 48,
    leetcodeUrl: 'https://leetcode.com/problems/surrounded-regions/',
    sources: ['NeetCode'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m * n)'
  },
  {
    id: 'rotting-oranges',
    title: 'Rotting Oranges',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 52,
    leetcodeUrl: 'https://leetcode.com/problems/rotting-oranges/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m * n)'
  },

  // More Dynamic Programming Problems
  {
    id: 'coin-change',
    title: 'Coin Change',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 71,
    leetcodeUrl: 'https://leetcode.com/problems/coin-change/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(amount * coins)',
    spaceComplexity: 'O(amount)'
  },
  {
    id: 'longest-increasing-subsequence',
    title: 'Longest Increasing Subsequence',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 63,
    leetcodeUrl: 'https://leetcode.com/problems/longest-increasing-subsequence/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n log n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'word-break',
    title: 'Word Break',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 68,
    leetcodeUrl: 'https://leetcode.com/problems/word-break/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n^2)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'combination-sum-iv',
    title: 'Combination Sum IV',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 49,
    leetcodeUrl: 'https://leetcode.com/problems/combination-sum-iv/',
    sources: ['NeetCode'],
    timeComplexity: 'O(target * nums)',
    spaceComplexity: 'O(target)'
  },
  {
    id: 'house-robber-ii',
    title: 'House Robber II',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 56,
    leetcodeUrl: 'https://leetcode.com/problems/house-robber-ii/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'decode-ways',
    title: 'Decode Ways',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 58,
    leetcodeUrl: 'https://leetcode.com/problems/decode-ways/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'unique-paths',
    title: 'Unique Paths',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['2d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 62,
    leetcodeUrl: 'https://leetcode.com/problems/unique-paths/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m * n)'
  },
  {
    id: 'longest-common-subsequence',
    title: 'Longest Common Subsequence',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['2d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 59,
    leetcodeUrl: 'https://leetcode.com/problems/longest-common-subsequence/',
    sources: ['NeetCode'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m * n)'
  },

  // Heap/Priority Queue Problems
  {
    id: 'find-median-from-data-stream',
    title: 'Find Median from Data Stream',
    difficulty: 'Hard',
    category: 'Heap',
    patterns: ['heap-priority-queue'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 73,
    leetcodeUrl: 'https://leetcode.com/problems/find-median-from-data-stream/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(log n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'task-scheduler',
    title: 'Task Scheduler',
    difficulty: 'Medium',
    category: 'Heap',
    patterns: ['heap-priority-queue', 'greedy'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 65,
    leetcodeUrl: 'https://leetcode.com/problems/task-scheduler/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'kth-largest-element-in-array',
    title: 'Kth Largest Element in an Array',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['heap-priority-queue'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 76,
    leetcodeUrl: 'https://leetcode.com/problems/kth-largest-element-in-an-array/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n log k)',
    spaceComplexity: 'O(k)'
  },

  // Backtracking Problems
  {
    id: 'subsets',
    title: 'Subsets',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['backtracking'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 67,
    leetcodeUrl: 'https://leetcode.com/problems/subsets/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(2^n)',
    spaceComplexity: 'O(2^n)'
  },
  {
    id: 'combination-sum',
    title: 'Combination Sum',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['backtracking'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/combination-sum/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(2^target)',
    spaceComplexity: 'O(target)'
  },
  {
    id: 'permutations',
    title: 'Permutations',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['backtracking'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 69,
    leetcodeUrl: 'https://leetcode.com/problems/permutations/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n!)',
    spaceComplexity: 'O(n!)'
  },
  {
    id: 'word-search',
    title: 'Word Search',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['backtracking'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 64,
    leetcodeUrl: 'https://leetcode.com/problems/word-search/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(N * 4^L)',
    spaceComplexity: 'O(L)'
  },
  {
    id: 'letter-combinations-phone-number',
    title: 'Letter Combinations of a Phone Number',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['backtracking'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 71,
    leetcodeUrl: 'https://leetcode.com/problems/letter-combinations-of-a-phone-number/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(3^n * 4^m)',
    spaceComplexity: 'O(3^n * 4^m)'
  },

  // Tries Problems
  {
    id: 'implement-trie',
    title: 'Implement Trie (Prefix Tree)',
    difficulty: 'Medium',
    category: 'Trie',
    patterns: ['tries'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 66,
    leetcodeUrl: 'https://leetcode.com/problems/implement-trie-prefix-tree/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(m)',
    spaceComplexity: 'O(ALPHABET_SIZE * N * M)'
  },
  {
    id: 'design-add-search-words',
    title: 'Design Add and Search Words Data Structure',
    difficulty: 'Medium',
    category: 'Trie',
    patterns: ['tries'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 57,
    leetcodeUrl: 'https://leetcode.com/problems/design-add-and-search-words-data-structure/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(m)',
    spaceComplexity: 'O(ALPHABET_SIZE * N * M)'
  },
  {
    id: 'word-search-ii',
    title: 'Word Search II',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['tries', 'backtracking'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 58,
    leetcodeUrl: 'https://leetcode.com/problems/word-search-ii/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(m * n * 4^L)',
    spaceComplexity: 'O(N)'
  },

  // More Greedy Problems
  {
    id: 'jump-game',
    title: 'Jump Game',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['greedy'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 68,
    leetcodeUrl: 'https://leetcode.com/problems/jump-game/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'jump-game-ii',
    title: 'Jump Game II',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['greedy'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/jump-game-ii/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'gas-station',
    title: 'Gas Station',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['greedy'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 54,
    leetcodeUrl: 'https://leetcode.com/problems/gas-station/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },

  // More Math & Geometry Problems
  {
    id: 'rotate-image',
    title: 'Rotate Image',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['math-geometry'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 65,
    leetcodeUrl: 'https://leetcode.com/problems/rotate-image/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n^2)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'spiral-matrix',
    title: 'Spiral Matrix',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['math-geometry'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 62,
    leetcodeUrl: 'https://leetcode.com/problems/spiral-matrix/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'set-matrix-zeroes',
    title: 'Set Matrix Zeroes',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['math-geometry'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 59,
    leetcodeUrl: 'https://leetcode.com/problems/set-matrix-zeroes/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(1)'
  },

  // Bit Manipulation Problems
  {
    id: 'single-number',
    title: 'Single Number',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['bit-manipulation'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 71,
    leetcodeUrl: 'https://leetcode.com/problems/single-number/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'number-of-1-bits',
    title: 'Number of 1 Bits',
    difficulty: 'Easy',
    category: 'Bit Manipulation',
    patterns: ['bit-manipulation'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 58,
    leetcodeUrl: 'https://leetcode.com/problems/number-of-1-bits/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'counting-bits',
    title: 'Counting Bits',
    difficulty: 'Easy',
    category: 'Dynamic Programming',
    patterns: ['bit-manipulation', '1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 54,
    leetcodeUrl: 'https://leetcode.com/problems/counting-bits/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'reverse-bits',
    title: 'Reverse Bits',
    difficulty: 'Easy',
    category: 'Bit Manipulation',
    patterns: ['bit-manipulation'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 46,
    leetcodeUrl: 'https://leetcode.com/problems/reverse-bits/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'missing-number',
    title: 'Missing Number',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['bit-manipulation', 'math-geometry'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 63,
    leetcodeUrl: 'https://leetcode.com/problems/missing-number/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'sum-of-two-integers',
    title: 'Sum of Two Integers',
    difficulty: 'Medium',
    category: 'Math',
    patterns: ['bit-manipulation'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 49,
    leetcodeUrl: 'https://leetcode.com/problems/sum-of-two-integers/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)'
  },

  // Advanced Algorithm Problems (reaching 300+)
  {
    id: 'minimum-window-substring',
    title: 'Minimum Window Substring',
    difficulty: 'Hard',
    category: 'String',
    patterns: ['sliding-window'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 75,
    leetcodeUrl: 'https://leetcode.com/problems/minimum-window-substring/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(s + t)',
    spaceComplexity: 'O(s + t)'
  },
  {
    id: 'alien-dictionary',
    title: 'Alien Dictionary',
    difficulty: 'Hard',
    category: 'Graph',
    patterns: ['graphs', 'tries'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 52,
    leetcodeUrl: 'https://leetcode.com/problems/alien-dictionary/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(C)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'median-of-two-sorted-arrays',
    title: 'Median of Two Sorted Arrays',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['binary-search'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 69,
    leetcodeUrl: 'https://leetcode.com/problems/median-of-two-sorted-arrays/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(log(min(m,n)))',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'regular-expression-matching',
    title: 'Regular Expression Matching',
    difficulty: 'Hard',
    category: 'String',
    patterns: ['2d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 58,
    leetcodeUrl: 'https://leetcode.com/problems/regular-expression-matching/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m * n)'
  },
  {
    id: 'wildcard-matching',
    title: 'Wildcard Matching',
    difficulty: 'Hard',
    category: 'String',
    patterns: ['2d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 42,
    leetcodeUrl: 'https://leetcode.com/problems/wildcard-matching/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m * n)'
  },
  {
    id: 'edit-distance',
    title: 'Edit Distance',
    difficulty: 'Hard',
    category: 'String',
    patterns: ['2d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/edit-distance/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m * n)'
  },
  {
    id: 'interleaving-string',
    title: 'Interleaving String',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['2d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 38,
    leetcodeUrl: 'https://leetcode.com/problems/interleaving-string/',
    sources: ['NeetCode'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m * n)'
  },
  {
    id: 'distinct-subsequences',
    title: 'Distinct Subsequences',
    difficulty: 'Hard',
    category: 'String',
    patterns: ['2d-dynamic-programming'],
    companies: ['Google', 'Amazon'],
    frequency: 35,
    leetcodeUrl: 'https://leetcode.com/problems/distinct-subsequences/',
    sources: ['NeetCode'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m * n)'
  },
  {
    id: 'best-time-to-buy-and-sell-stock-with-cooldown',
    title: 'Best Time to Buy and Sell Stock with Cooldown',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 47,
    leetcodeUrl: 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'coin-change-2',
    title: 'Coin Change 2',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['2d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 44,
    leetcodeUrl: 'https://leetcode.com/problems/coin-change-2/',
    sources: ['NeetCode'],
    timeComplexity: 'O(amount * coins)',
    spaceComplexity: 'O(amount)'
  },
  {
    id: 'target-sum',
    title: 'Target Sum',
    difficulty: 'Medium',
    category: 'Dynamic Programming',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 51,
    leetcodeUrl: 'https://leetcode.com/problems/target-sum/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n * sum)',
    spaceComplexity: 'O(sum)'
  },

  // More String Problems
  {
    id: 'group-anagrams',
    title: 'Group Anagrams',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 73,
    leetcodeUrl: 'https://leetcode.com/problems/group-anagrams/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n * k log k)',
    spaceComplexity: 'O(n * k)'
  },
  {
    id: 'encode-and-decode-strings',
    title: 'Encode and Decode Strings',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 46,
    leetcodeUrl: 'https://leetcode.com/problems/encode-and-decode-strings/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'longest-palindromic-substring',
    title: 'Longest Palindromic Substring',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 72,
    leetcodeUrl: 'https://leetcode.com/problems/longest-palindromic-substring/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n^2)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'palindromic-substrings',
    title: 'Palindromic Substrings',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 55,
    leetcodeUrl: 'https://leetcode.com/problems/palindromic-substrings/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n^2)',
    spaceComplexity: 'O(1)'
  },

  // Graph Advanced Problems
  {
    id: 'graph-valid-tree',
    title: 'Graph Valid Tree',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 43,
    leetcodeUrl: 'https://leetcode.com/problems/graph-valid-tree/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(V + E)',
    spaceComplexity: 'O(V + E)'
  },
  {
    id: 'number-of-connected-components-undirected-graph',
    title: 'Number of Connected Components in an Undirected Graph',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 48,
    leetcodeUrl: 'https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(V + E)',
    spaceComplexity: 'O(V)'
  },
  {
    id: 'redundant-connection',
    title: 'Redundant Connection',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon'],
    frequency: 39,
    leetcodeUrl: 'https://leetcode.com/problems/redundant-connection/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n * Î±(n))',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'network-delay-time',
    title: 'Network Delay Time',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon'],
    frequency: 42,
    leetcodeUrl: 'https://leetcode.com/problems/network-delay-time/',
    sources: ['NeetCode'],
    timeComplexity: 'O(V + E log V)',
    spaceComplexity: 'O(V + E)'
  },
  {
    id: 'cheapest-flights-within-k-stops',
    title: 'Cheapest Flights Within K Stops',
    difficulty: 'Medium',
    category: 'Graph',
    patterns: ['graphs'],
    companies: ['Google', 'Amazon'],
    frequency: 46,
    leetcodeUrl: 'https://leetcode.com/problems/cheapest-flights-within-k-stops/',
    sources: ['NeetCode'],
    timeComplexity: 'O(V * E)',
    spaceComplexity: 'O(V)'
  },

  // Advanced Tree Problems
  {
    id: 'count-good-nodes-binary-tree',
    title: 'Count Good Nodes in Binary Tree',
    difficulty: 'Medium',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon'],
    frequency: 51,
    leetcodeUrl: 'https://leetcode.com/problems/count-good-nodes-in-binary-tree/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(h)'
  },
  {
    id: 'lowest-common-ancestor-binary-tree',
    title: 'Lowest Common Ancestor of a Binary Tree',
    difficulty: 'Medium',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 66,
    leetcodeUrl: 'https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(h)'
  },
  {
    id: 'binary-tree-right-side-view',
    title: 'Binary Tree Right Side View',
    difficulty: 'Medium',
    category: 'Tree',
    patterns: ['trees'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 63,
    leetcodeUrl: 'https://leetcode.com/problems/binary-tree-right-side-view/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(h)'
  },

  // More Interval Problems
  {
    id: 'meeting-rooms',
    title: 'Meeting Rooms',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['intervals'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 57,
    leetcodeUrl: 'https://leetcode.com/problems/meeting-rooms/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n log n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'meeting-rooms-ii',
    title: 'Meeting Rooms II',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['intervals', 'heap-priority-queue'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 68,
    leetcodeUrl: 'https://leetcode.com/problems/meeting-rooms-ii/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n log n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'minimum-interval-to-include-each-query',
    title: 'Minimum Interval to Include Each Query',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['intervals', 'heap-priority-queue'],
    companies: ['Google', 'Amazon'],
    frequency: 34,
    leetcodeUrl: 'https://leetcode.com/problems/minimum-interval-to-include-each-query/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n log n)',
    spaceComplexity: 'O(n)'
  },

  // Design Problems
  {
    id: 'lru-cache',
    title: 'LRU Cache',
    difficulty: 'Medium',
    category: 'Design',
    patterns: ['linked-list', 'arrays-hashing'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 78,
    leetcodeUrl: 'https://leetcode.com/problems/lru-cache/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(capacity)'
  },
  {
    id: 'implement-queue-using-stacks',
    title: 'Implement Queue using Stacks',
    difficulty: 'Easy',
    category: 'Stack',
    patterns: ['stack'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 64,
    leetcodeUrl: 'https://leetcode.com/problems/implement-queue-using-stacks/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(1) amortized',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'design-hit-counter',
    title: 'Design Hit Counter',
    difficulty: 'Medium',
    category: 'Design',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 45,
    leetcodeUrl: 'https://leetcode.com/problems/design-hit-counter/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'time-based-key-value-store',
    title: 'Time Based Key-Value Store',
    difficulty: 'Medium',
    category: 'Design',
    patterns: ['binary-search', 'arrays-hashing'],
    companies: ['Google', 'Amazon', 'Facebook'],
    frequency: 53,
    leetcodeUrl: 'https://leetcode.com/problems/time-based-key-value-store/',
    sources: ['NeetCode'],
    timeComplexity: 'O(log n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'design-browser-history',
    title: 'Design Browser History',
    difficulty: 'Medium',
    category: 'Design',
    patterns: ['linked-list'],
    companies: ['Google', 'Amazon'],
    frequency: 41,
    leetcodeUrl: 'https://leetcode.com/problems/design-browser-history/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(n)'
  },

  // Mathematical Problems
  {
    id: 'powx-n',
    title: 'Pow(x, n)',
    difficulty: 'Medium',
    category: 'Math',
    patterns: ['math-geometry'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 59,
    leetcodeUrl: 'https://leetcode.com/problems/powx-n/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(log n)',
    spaceComplexity: 'O(log n)'
  },
  {
    id: 'multiply-strings',
    title: 'Multiply Strings',
    difficulty: 'Medium',
    category: 'String',
    patterns: ['math-geometry'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 56,
    leetcodeUrl: 'https://leetcode.com/problems/multiply-strings/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(m * n)',
    spaceComplexity: 'O(m + n)'
  },
  {
    id: 'detect-squares',
    title: 'Detect Squares',
    difficulty: 'Medium',
    category: 'Design',
    patterns: ['math-geometry', 'arrays-hashing'],
    companies: ['Google', 'Amazon'],
    frequency: 38,
    leetcodeUrl: 'https://leetcode.com/problems/detect-squares/',
    sources: ['NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },

  // More Array Problems
  {
    id: 'product-of-array-except-self',
    title: 'Product of Array Except Self',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['arrays-hashing'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 74,
    leetcodeUrl: 'https://leetcode.com/problems/product-of-array-except-self/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'next-permutation',
    title: 'Next Permutation',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['math-geometry'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 52,
    leetcodeUrl: 'https://leetcode.com/problems/next-permutation/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'insert-interval',
    title: 'Insert Interval',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['intervals'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 67,
    leetcodeUrl: 'https://leetcode.com/problems/insert-interval/',
    sources: ['LeetCodeWizard', 'NeetCode'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)'
  },
  {
    id: 'maximum-subarray',
    title: 'Maximum Subarray',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 76,
    leetcodeUrl: 'https://leetcode.com/problems/maximum-subarray/',
    sources: ['LeetCodeWizard', 'NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'maximum-product-subarray',
    title: 'Maximum Product Subarray',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['1d-dynamic-programming'],
    companies: ['Google', 'Amazon', 'Microsoft', 'Facebook'],
    frequency: 64,
    leetcodeUrl: 'https://leetcode.com/problems/maximum-product-subarray/',
    sources: ['NeetCode', 'Blind75'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'find-minimum-in-rotated-sorted-array-ii',
    title: 'Find Minimum in Rotated Sorted Array II',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['binary-search'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 41,
    leetcodeUrl: 'https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(log n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'search-in-rotated-sorted-array-ii',
    title: 'Search in Rotated Sorted Array II',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['binary-search'],
    companies: ['Google', 'Amazon', 'Microsoft'],
    frequency: 45,
    leetcodeUrl: 'https://leetcode.com/problems/search-in-rotated-sorted-array-ii/',
    sources: ['LeetCodeWizard'],
    timeComplexity: 'O(log n)',
    spaceComplexity: 'O(1)'
  },
  {
    id: 'create-hello-world-function',
    title: 'Create Hello World Function',
    difficulty: 'Easy',
    category: 'Function',
    patterns: [],
    companies: [],
    frequency: 74,
    leetcodeUrl: 'https://leetcode.com/problems/create-hello-world-function/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'power-of-three',
    title: 'Power of Three',
    difficulty: 'Easy',
    category: 'Math',
    patterns: ['math-geometry', 'recursion'],
    companies: [],
    frequency: 73,
    leetcodeUrl: 'https://leetcode.com/problems/power-of-three/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'maximum-swap',
    title: 'Maximum Swap',
    difficulty: 'Medium',
    category: 'Math',
    patterns: ['math-geometry', 'greedy'],
    companies: [],
    frequency: 69,
    leetcodeUrl: 'https://leetcode.com/problems/maximum-swap/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'recyclable-and-low-fat-products',
    title: 'Recyclable and Low Fat Products',
    difficulty: 'Easy',
    category: 'Database',
    patterns: ['database'],
    companies: [],
    frequency: 69,
    leetcodeUrl: 'https://leetcode.com/problems/recyclable-and-low-fat-products/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'find-the-count-of-monotonic-pairs-i',
    title: 'Find the Count of Monotonic Pairs I',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['array', 'math-geometry', 'dynamic-programming', 'combinatorics', 'prefix-sum'],
    companies: [],
    frequency: 69,
    leetcodeUrl: 'https://leetcode.com/problems/find-the-count-of-monotonic-pairs-i/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'separate-squares-i',
    title: 'Separate Squares I',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['array', 'binary-search'],
    companies: [],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/separate-squares-i/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'range-module',
    title: 'Range Module',
    difficulty: 'Hard',
    category: 'Design',
    patterns: ['design', 'segment-tree', 'ordered-set'],
    companies: [],
    frequency: 57,
    leetcodeUrl: 'https://leetcode.com/problems/range-module/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'count-good-triplets',
    title: 'Count Good Triplets',
    difficulty: 'Easy',
    category: 'Array',
    patterns: ['array', 'enumeration'],
    companies: [],
    frequency: 57,
    leetcodeUrl: 'https://leetcode.com/problems/count-good-triplets/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'solving-questions-with-brainpower',
    title: 'Solving Questions With Brainpower',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['array', 'dynamic-programming'],
    companies: [],
    frequency: 57,
    leetcodeUrl: 'https://leetcode.com/problems/solving-questions-with-brainpower/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'number-of-visible-people-in-a-queue',
    title: 'Number of Visible People in a Queue',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['array', 'stack', 'monotonic-stack'],
    companies: [],
    frequency: 53,
    leetcodeUrl: 'https://leetcode.com/problems/number-of-visible-people-in-a-queue/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'minimum-weighted-subgraph-with-the-required-paths',
    title: 'Minimum Weighted Subgraph With the Required Paths',
    difficulty: 'Hard',
    category: 'Graph',
    patterns: ['graph', 'shortest-path'],
    companies: [],
    frequency: 53,
    leetcodeUrl: 'https://leetcode.com/problems/minimum-weighted-subgraph-with-the-required-paths/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'count-subarrays-with-fixed-bounds',
    title: 'Count Subarrays With Fixed Bounds',
    difficulty: 'Hard',
    category: 'Array',
    patterns: ['array', 'queue', 'sliding-window', 'monotonic-queue'],
    companies: [],
    frequency: 53,
    leetcodeUrl: 'https://leetcode.com/problems/count-subarrays-with-fixed-bounds/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'count-symmetric-integers',
    title: 'Count Symmetric Integers',
    difficulty: 'Easy',
    category: 'Math',
    patterns: ['math-geometry', 'enumeration'],
    companies: [],
    frequency: 53,
    leetcodeUrl: 'https://leetcode.com/problems/count-symmetric-integers/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'largest-divisible-subset',
    title: 'Largest Divisible Subset',
    difficulty: 'Medium',
    category: 'Array',
    patterns: ['array', 'math-geometry', 'dynamic-programming', 'sorting'],
    companies: [],
    frequency: 61,
    leetcodeUrl: 'https://leetcode.com/problems/largest-divisible-subset/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'add-two-integers',
    title: 'Add Two Integers',
    difficulty: 'Easy',
    category: 'Math',
    patterns: ['math-geometry'],
    companies: [],
    frequency: 53,
    leetcodeUrl: 'https://leetcode.com/problems/add-two-integers/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'roman-to-integer',
    title: 'Roman to Integer',
    difficulty: 'Easy',
    category: 'String',
    patterns: ['arrays-hashing', 'math-geometry'],
    companies: [],
    frequency: 48,
    leetcodeUrl: 'https://leetcode.com/problems/roman-to-integer/',
    sources: ['LeetCodeWizard'],
  },
  {
    id: 'longest-common-prefix',
    title: 'Longest Common Prefix',
    difficulty: 'Easy',
    category: 'String',
    patterns: ['tries'],
    companies: [],
    frequency: 48,
    leetcodeUrl: 'https://leetcode.com/problems/longest-common-prefix/',
    sources: ['LeetCodeWizard'],
  }
]; 